Oque é um Script:
É um arquivo que contêm uma sequência de comandos ou loops que vai executar oque você quer.
$ vim PrimeiroScript.sh -> para criar um script

Opções para executar o script:
$ source PrimeiroScript.sh
$ . PrimeiroScript.sh
$ ./PrimeiroScript.sh -> só vai executar se você modificar as permissões (chmod 777)
$ exec ./PrimeiroScript.sh -> executa o scrip e fecha a seção atual 

para deixar o script no path, edite o arquivo ~/.profile
parâmetro para add no arquivo:
PATH="$HOME/Scripts:" -> no diretorio onde está os Scripts criados

Para atualizar o PATH, execute o comando:
$ echo $PATH -> lista o path atual
$ PATH=/home/script:resto do conteudo no comando acima. 

para criar um script que possa ser enterpretado por outros shells, precisamos fazer o "she-bang"
#!/bin/zsh (bash, ksh e etc)


Utilização de parâmetro:
Um exemplo dentro do script:
echo "O meu script se chama $0" #$0 retorna o nome do script
echo "Esse script recebeu $# parametros que sao, $1 $2"

Executando fora do script, no terminal:
./PrimeiroScript.sh 10 Dennis 
O meu script se chama ./PrimeiroScript.sh
Esse script recebeu 3 parametros que sao, 10 Dennis


Conceitos de if e case:
acesse o /etc/profile para entender melhor o if.
Exemplo:
if [ -f /etc/bash.bashrc ]; then 
  . /etc/bash.bashrc
fi
else


Conceitos de for, while e until:
um comando importante e simples no bash:
$ seq 10 -> faz uma sequencia de numeros
$ expr 1 + 2 -> faz uma conta aritimetica

while -> raliza a condição enquanto for verdadeira
until -> raliza a condição ATE que isso seja verdadeira


sequencia de comandos que podem ser usados no shellscripts:
exemplo:
cat teste | wc -l -> Saida de um comando para entrada de outro 
date ; ls -l teste ; echo Exemplo -> executa o comando em sequencia (mesmo que o comando der errado)
ls -l teste && echo Exemplo -> só executa o segundo comando se o primeiro estiver ok 
ls -l teste || echo Exemplo -> só executa o segundo comando se o primeiro estiver com erro 

